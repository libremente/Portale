# -*- encoding : utf-8 -*-
require 'ruby-saml-federa'
require 'apps/portal/lib/auth_provider'
require 'apps/portal/models/auth_providers/federa_emilia_romagna/utente_federa'
require 'apps/portal/models/auth_providers/federa_emilia_romagna/tracciatura_federa_emilia_romagna'
require 'openssl'
require "base64"
require "zlib"

require 'net/http'
require 'uri'

module Portal
    
    class FederaEmiliaRomagna < Spider::PageController
        include HTTPMixin
        include AuthProvider
        include Spider::Messenger::MessengerHelper 
        include Federa::Saml::Coding

        verifica_presenza_configurazioni('federa', ['idp_metadata', 'destination_service_url', 'idp_sso_target_url', 'requester_identificator'])

        auth_provider({
            :label => 'federa_emilia_romagna',
            :nome => 'FedERa/SPID',
            :descrizione => 'Servizio di autenticazione attraverso gestore FedERa o SPID'
        })

        __.xml
        def sp_metadata
            meta = Federa::Saml::Metadata.new
            settings = get_saml_settings
            @response.headers['Content-Type'] = 'application/samlmetadata+xml'
            $out << meta.generate(settings)
        end



        __.action
        def index
            begin
                saml_settings = get_saml_settings
                #create an instance of Federa::Saml::Authrequest
                request = Federa::Saml::Authrequest.new(saml_settings)
                
                auth_request = request.create
                 # Based on the IdP metadata, select the appropriate binding 
                # and return the action to perform to the controller
                meta = Federa::Saml::Metadata.new(saml_settings)
                signature = get_signature(auth_request.uuid,auth_request.request,"http://www.w3.org/2000/09/xmldsig#rsa-sha1")

                

                sso_request = meta.create_sso_request( auth_request.request, {   :RelayState   => request.uuid,
                                                                            :SigAlg       => "http://www.w3.org/2000/09/xmldsig#rsa-sha1",
                                                                            :Signature    => signature
                                                                        } )


                #creo una nuova istanza per la tracciatura
                tracciatura = Portal::TracciaturaFederaEmiliaRomagna.new
                saml_request_dec_compressa = Zlib::Deflate.deflate(auth_request.request)
                tracciatura.authn_request = Base64.strict_encode64(saml_request_dec_compressa)
                tracciatura.authn_req_id = auth_request.uuid
                tracciatura.authn_req_issue_instant = auth_request.issue_instant
                tracciatura.save

                redirect sso_request 

            rescue Exception => exc
                messaggio = "Errore Applicativo ( #{exc.message} )"
                messaggio_log = messaggio
                exc.backtrace.each{|riga_errore| 
                    messaggio_log += "\n\r#{riga_errore}" 
                } 
                Spider.logger.error messaggio_log
                @request.session.flash['errore_auth'] = (Spider.runmode == 'devel' ? messaggio_log.gsub("\n","<br />") : messaggio)
                redirect Portal::ControllerAutenticazione.http_s_url
            end

        end
        
        #url http://localhost:8080/portal/auth/federa_emilia_romagna/assertion_consumer

        __.html
        def assertion_consumer
            target = @request.params['target']
            saml_response = @request.params['SAMLResponse'] 
            #Stringa di response per fare i test
            #saml_response = ""
            
            if !saml_response.nil? 
                #read the settings
                settings = get_saml_settings
                #creo un oggetto response
                response = Federa::Saml::Response.new(saml_response)
                #assegno alla response i settaggi
                response.settings = settings
                #estraggo dal Base64 l'xml, forse servirà..
                saml_response_dec = Base64.decode64(saml_response)

                #controllo validità response, da finire
                errore_autenticazione "La response non è valida" unless response.is_valid?

                attributi_utente = response.attributes
                codice_fiscale = attributi_utente[:CodiceFiscale]

                unless codice_fiscale
                    Spider.logger.error "L'Idp di Federa non ha restituito un name_id valido"
                    errore_autenticazione "il sistema di autenticazione remoto non ha trovato l'utente"
                end
                codice_fiscale = codice_fiscale.strip
                codice_fiscale_maiuscolo = codice_fiscale.upcase
                utente_qs = UtenteFederaEmiliaRomagna.where{ |ut_fed| (ut_fed.chiave == codice_fiscale) | (ut_fed.chiave == codice_fiscale_maiuscolo) }
                utente_portale = nil
                creato = false
                #se presente un utente federa lo carico
                unless utente_qs.length == 0
                    utente = utente_qs[0]
                    utente_portale = utente.utente_portale
                    Spider.logger.debug "** Caricato utente portale #{utente_portale.codice_fiscale}"
                else
                    #creo utente federa
                    utente = UtenteFederaEmiliaRomagna.new(:chiave => codice_fiscale)
                    #potrebbe già esserci un utente portale con quel cf
                    utente_presente_qs = Portal::Utente.where{ |ut_portale| (ut_portale.codice_fiscale == codice_fiscale) | (ut_portale.codice_fiscale == codice_fiscale_maiuscolo) }
                    unless utente_presente_qs.length == 0
                        #utente portale presente
                        utente_portale = utente_presente_qs[0]
                        Spider.logger.debug "** Creato utente federa collegato ad utente portale #{utente_portale.codice_fiscale}"
                    else
                        #devo creare un nuovo utente portale
                        utente_portale = Portal::Utente.new
                        creato = true
                    end
                end
                dati_da_idp = []
                #aggiorno i dati anagrafici
                unless attributi_utente[:nome].blank?
                    utente_portale.nome = attributi_utente[:nome] 
                    dati_da_idp << "Nome"
                end
                unless attributi_utente[:cognome].blank?
                    utente_portale.cognome = attributi_utente[:cognome]
                    dati_da_idp << "Cognome"
                end
                unless attributi_utente[:CodiceFiscale].blank?
                    utente_portale.codice_fiscale = attributi_utente[:CodiceFiscale]
                    dati_da_idp << "Codice Fiscale"
                end
                unless attributi_utente[:sesso].blank?
                    utente_portale.sesso = attributi_utente[:sesso]
                    dati_da_idp << "Sesso"
                end 
                

                if attributi_utente[:spidCode].blank?
                    unless attributi_utente[:luogoNascita].blank?
                        utente_portale.comune_nascita = attributi_utente[:luogoNascita]
                        dati_da_idp << "Comune Nascita"
                    end
                end
                stato_nascita = attributi_utente[:statoNascita]
                unless stato_nascita.blank?
                    dati_da_idp << "Stato Nascita"
                    if stato_nascita.strip == 'ITALIA' || stato_nascita.strip == '0'
                        utente_portale.stato_nascita = 'IT'
                    else
                        utente_portale.stato_nascita = stato_nascita
                    end
                end

                spid_code =  attributi_utente[:spidCode]
                unless spid_code.blank?
                    unless attributi_utente[:dataNascita].blank?
                        utente_portale.data_nascita = Date.strptime(attributi_utente[:dataNascita], "%Y-%m-%d")
                        dati_da_idp << "Data Nascita"
                    end
                else
                    unless attributi_utente[:dataNascita].blank?
                        utente_portale.data_nascita = Date.strptime(attributi_utente[:dataNascita], "%d/%m/%Y")
                        dati_da_idp << "Data Nascita"
                    end
                end
                email_pec =  attributi_utente[:emailAddress]
                unless email_pec.blank?
                    dati_da_idp << "Pec"
                    unless email_pec == '-'
                        utente_portale.pec = attributi_utente[:emailAddress] unless attributi_utente[:emailAddress].blank?
                    end
                end
                unless attributi_utente[:emailAddressPersonale].blank?
                    utente_portale.email = attributi_utente[:emailAddressPersonale]
                    dati_da_idp << "E-mail"
                end
                unless attributi_utente[:provinciaNascita].blank?
                    utente_portale.provincia_nascita = attributi_utente[:provinciaNascita]
                    dati_da_idp << "Provincia Nascita"
                end
                if utente_portale.cellulare.blank? && !attributi_utente[:cellulare].blank?
                    cellulare = attributi_utente[:cellulare]
                    dati_da_idp << "Cellulare"
                    if !cellulare.include?("+") && (cellulare.length == 10 || cellulare.length == 9)
                        utente_portale.cellulare = cellulare
                    elsif cellulare.include?("+39") && (cellulare.length == 13 || cellulare.length == 12)
                        utente_portale.cellulare = cellulare.gsub("+39","")
                    end
                end
                unless attributi_utente[:capResidenza].blank?
                    utente_portale.cap_residenza = attributi_utente[:capResidenza]
                    dati_da_idp << "Cap Residenza"
                end 
                unless attributi_utente[:comuneResidenza].blank?
                    utente_portale.comune_residenza = attributi_utente[:comuneResidenza]
                    dati_da_idp << "Comune Residenza"
                end
                unless attributi_utente[:indirizzoResidenza].blank?
                    utente_portale.indirizzo_residenza = attributi_utente[:indirizzoResidenza]
                    dati_da_idp << "Indirizzo Residenza"
                end
                unless attributi_utente[:provinciaDomicilio].blank?
                    utente_portale.provincia_residenza = attributi_utente[:provinciaDomicilio]
                    dati_da_idp << "Provincia Residenza"
                end
                unless attributi_utente[:telefono].blank?
                    utente_portale.telefono = attributi_utente[:telefono]
                    dati_da_idp << "Telefono"
                end 
                #salvo in sessione i dati che arrivano da idp
                @request.session['dati_da_idp'] = dati_da_idp

                utente_portale.stato = 'confermato'
                utente_portale.save

                authn_req_id = response.response_to_id
                unless authn_req_id.blank?
                    traccia_response = Portal::TracciaturaFederaEmiliaRomagna.load(:authn_req_id => authn_req_id)
                    unless traccia_response.blank?
                        saml_response_dec_compressa = Zlib::Deflate.deflate(saml_response_dec)
                        traccia_response.response = Base64.strict_encode64(saml_response_dec_compressa)
                        traccia_response.response_id = response.id
                        traccia_response.response_issue_instant = response.issue_instant
                        traccia_response.response_issuer = response.issuer
                        traccia_response.assertion_id = response.assertion_id
                        traccia_response.assertion_subject = response.assertion_subject
                        traccia_response.assertion_subject_name_qualifier = response.assertion_subject_name_qualifier
                        traccia_response.spid_code = attributi_utente[:spidCode]
                        traccia_response.authn_authority = attributi_utente[:authenticatingAuthority]
                        traccia_response.authn_method = attributi_utente[:authenticationMethod]
                        traccia_response.utente_tracciato = utente_portale
                        traccia_response.save
                    else
                        raise "Response non corrispondente ad una request effettuata"
                    end
                else
                    raise "Response senza id request"
                end


                if creato
                    #Spider.logger.debug "** CREATO TRUE"
                    utente.utente_portale = utente_portale
                    utente.utente_esterno.insert
                    utente.insert
                else
                    #Spider.logger.debug "** CREATO FALSE"
                    utente.utente_portale = utente_portale
                    utente.save
                end
                

                if (!@request.utente_portale || @request.utente_portale != utente_portale)
                    @request.utente_portale = utente_portale
                end
                # Spider.logger.debug("Utente portale: #{@request.utente_portale}")
                @request.utente_portale.authenticated(:federa_emilia_romagna)
                utente.save_to_session(@request.session)
                #@request.utente_portale.save_to_session(@request.session)
                if creato
                    email_amministratore_utente_registrato(utente_portale.id) unless utente_portale.email.blank?
                    #VIENE IMPOSTATO A CONFERMATO SEMPRE, mod del 27/09/2016
                    # if (attivazione_automatica)
                    #     #mando mail
                    #     email_amministratore_utente_registrato(utente_portale.id) unless utente_portale.email.blank?
                    # else
                    #     #mando mail
                    #     email_amministratore_attesa_conferma(utente_portale.id) unless utente_portale.email.blank?
                    #     @scene.utente = utente_portale
                    #     render('auth_providers/federa_emilia_romagna/attesa_attivazione')
                    #     done
                    # end
                end

                

                #controllo se vengono passati i campi obbligatori
                campi_obbligatori_presenti = Portal.controlla_campi_obbligatori(utente_portale)
                if campi_obbligatori_presenti
                    redirect Portal.http_s_url
                else
                    #lo rimando alla pagina di modifica dei dati
                    redirect Portal.http_s_url('dettagli_utente?modifica')
                end

            else
                errore_autenticazione "Non sono stati ricevuti dati per l'utente"
            end    
        end
        
        __.xml
        def logout_service
            #controllo indirizzo dell' identity provider e faccio logout
            settings = get_saml_settings
            # LogoutRequest accepts plain browser requests w/o paramters 
            logout_request = Federa::Saml::LogoutRequest.new( :settings => settings )

            # Since we created a new SAML request, save the transaction_id 
            # in the session to compare it with the response we get back.
            # You'll need a shared session storage in a clustered environment.
            @request.session[:transaction_id] = logout_request.transaction_id

            # Create a new LogoutRequest for this session Name ID
            request_content = logout_request.create( :name_id => "fabiano", :session_index => "indice_sessione" )
            redirect request_content
            #$out << request_content

                
        end


        __.html
        def errore_autenticazione(messaggio)
            @scene.messaggio_errore = messaggio
            Spider.logger.error("Errore autenticazione Federa: #{messaggio}")
            render 'auth_providers/federa_emilia_romagna/autenticazione_fallita'
            done
        end
        

        def get_saml_settings
            settings = Federa::Saml::Settings.new
            if Spider.conf.get('portal.federa.https_server')
                local_portal_url = Portal.http_s_url
            else
                local_portal_url = Portal.http_s_url
            end

            settings.assertion_consumer_service_url     = local_portal_url+'/auth/federa_emilia_romagna/assertion_consumer'
            settings.issuer                             = local_portal_url+'/auth/federa_emilia_romagna/sp_metadata'
            settings.sp_cert                            = File.join(Spider.paths[:certs],"default/cert.pem")
            settings.single_logout_service_url          = local_portal_url + '/auth/federa_emilia_romagna/logout_service'
            settings.sp_name_qualifier                  = local_portal_url + Spider.conf.get('portal.federa.sp_name_qualifier') 
            settings.idp_name_qualifier                 = Spider.conf.get('portal.federa.name_identifier_format')
            # Optional for most SAML IdPs
            #settings.authn_context = "urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport"
            #assegno ai settings un array da configurazione
            settings.name_identifier_format             = Spider.conf.get('portal.federa.name_identifier_format')
            settings.destination_service_url            = Spider.conf.get('portal.federa.destination_service_url')
            settings.single_logout_destination          = Spider.conf.get('portal.federa.single_logout_destination')
            settings.authn_context                      = Spider.conf.get('portal.federa.authn_context')
            settings.requester_identificator            = Spider.conf.get('portal.federa.requester_identificator')
            settings.skip_validation                    = Spider.conf.get('portal.federa.skip_validation')
            settings.idp_sso_target_url                 = Spider.conf.get('portal.federa.idp_sso_target_url')
            settings.idp_metadata                       = Spider.conf.get('portal.federa.idp_metadata')
            settings
        end

        def get_signature(relayState, request, sigAlg)
            #url encode relayState
            relayState_encoded = escape(relayState)
            #deflate e base64 della samlrequest
            deflate_request_B64 = encode(deflate(request))
            #url encode della samlrequest
            deflate_request_B64_encoded = escape(deflate_request_B64)
            #url encode della sigAlg
            sigAlg_encoded = escape(sigAlg)
            #querystring="RelayState=#{relayState_encoded}&SAMLRequest=#{deflate_request_B64_encoded}&SigAlg=#{sigAlg_encoded}"
            querystring="SAMLRequest=#{deflate_request_B64_encoded}&RelayState=#{relayState_encoded}&SigAlg=#{sigAlg_encoded}"
            #puts "**QUERYSTRING** = "+querystring
            digest = OpenSSL::Digest::SHA1.new(querystring.strip)  
            pk = OpenSSL::PKey::RSA.new File.read(File.join(Spider.paths[:certs],"default/private/key.pem"))
            qssigned = pk.sign(digest,querystring.strip)
            Base64.encode64(qssigned).gsub(/\n/, "")
        end

        
        def email_amministratore_attesa_conferma(id_utente)
            scene = Spider::Scene.new
            scene.utente = Portal::Utente.new(id_utente)
            scene.link_amministrazione = "http://#{@request.http_host}/admin/portal/utenti_federa_emilia_romagna/#{scene.utente.utente_federa_emilia_romagna.id}"
            scene.auth_provider = 'Gestore Identità Federa Emilia Romagna'
            headers = {'Subject' => "Registrazione al portale"}
            send_email('amministratore/utente_attesa_conferma', scene, Spider.conf.get('portal.email_from'), Spider.conf.get('portal.email_amministratore'), headers)
        end
        
        def email_amministratore_utente_registrato(id_utente)
            scene = Spider::Scene.new
            scene.utente = Portal::Utente.new(id_utente)
            scene.link_amministrazione = "http://#{@request.http_host}/admin/portal/utenti_federa_emilia_romagna/#{scene.utente.utente_federa_emilia_romagna.id}"
            scene.auth_provider = 'Gestore Identità Federa Emilia Romagna'
            headers = {'Subject' => "Registrazione al portale"}
            send_email('amministratore/utente_registrato', scene, Spider.conf.get('portal.email_from'), Spider.conf.get('portal.email_amministratore'), headers)
        end
        
       
        
    end
    
end
