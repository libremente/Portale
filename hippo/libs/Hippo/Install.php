<?

class Install{
  var $nameSpaces;
  
  function Install(){
  }

  function parseNameSpace($nameSpace='base'){
    global $IMP;
    $this->nameSpaces[$nameSpace]['structs'] = $IMP->typeSpace->parseNameSpace($nameSpace);
    #:TODO: add widgets and other stuff
  }
  
  function build($nameSpace, $struct=''){
    global $IMP;
    if ($struct) $structs = array($struct);
    else{
      if (!is_array($this->nameSpaces[$nameSpace]['structs']))
        $this->parseNameSpace($nameSpace);
      $structs = $this->nameSpaces[$nameSpace]['structs'];
    }
    foreach ($structs as $struct){
      if ($IMP->bindingManager->bindingType($struct) != 'db') continue;
      $structObj = $IMP->typeSpace->getStruct($struct);
      if ($structObj->data) continue;
      $builder = new Builder_db($struct); #:FIXME: for other bindings
      $builder->build();
    }
  }

  function isAutoGenerated($struct){
    $builder = new Builder_db($struct);
    return $builder->isAutoGenerated();
  }

  function getBindingPath($struct){
    $builder = new Builder_db($struct);
    return $builder->getBindingPath();
  }

  function getBindingFile($struct){
    $builder = new Builder_db($struct);
    return $builder->getBindingFile();
  }
  
  function register($nameSpace, $struct=''){
    global $IMP;
    if ($struct) $structs = array($struct);
    else{
      if (!is_array($this->nameSpaces[$nameSpace]['structs']))
        $this->parseNameSpace($nameSpace);
      $structs = $this->nameSpaces[$nameSpace]['structs'];
    }
    foreach ($structs as $struct){
      $loader = $IMP->getLoader('_struct');
      $loader->addParam('name', $struct);
      $list = $loader->load();
      if (!$list->moveNext()){
        $storer = $IMP->getStorer('_struct');
        $storer->set('name', $struct);
        $storer->store();
      }
    }   
  }
  
  function listNameSpaces(){
    $namespaces = array('base');
    $d = dir(APPS);
    while (false !== ($entry = $d->read())) {
      if ($entry[0] != '.') 
        array_push($namespaces, $entry);
    }
    return $namespaces;
  }
  
  function getStructs($nameSpace){
    return $this->nameSpaces[$nameSpace]['structs'];
  }


}


?>
